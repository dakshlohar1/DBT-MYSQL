import { AuthorizationError, formatDate } from '@lightdash/common';
import inquirer from 'inquirer';
import fetch from 'node-fetch';
import { URL } from 'url';
import { setContext, setDefaultUser } from '../config';
import { setProjectInteractively } from './setProject';

export const login = async (url: string) => {
    const answers = await inquirer.prompt([
        {
            type: 'input',
            name: 'email',
        },
        {
            type: 'password',
            name: 'password',
        },
    ]);
    const { email, password } = answers;
    const loginUrl = new URL(`/api/v1/login`, url).href;
    const response = await fetch(loginUrl, {
        method: 'POST',
        body: JSON.stringify({ email, password }),
        headers: {
            'Content-Type': 'application/json',
        },
    });
    const loginBody = await response.json();
    const header = response.headers.get('set-cookie');
    if (header === null) {
        throw new AuthorizationError(
            `Cannot sign in:\n${JSON.stringify(loginBody)}`,
        );
    }
    const { userUuid } = loginBody.results;
    const cookie = header.split(';')[0].split('=')[1];
    const patUrl = new URL(`/api/v1/user/me/personal-access-tokens`, url).href;
    const now = new Date();
    const description = `Generated by the Lightdash CLI on ${formatDate(now)}`;
    const expiresAt = new Date(now.setDate(now.getDate() + 30));
    const body = JSON.stringify({ expiresAt, description });
    const patResponse = await fetch(patUrl, {
        method: 'POST',
        body,
        headers: {
            'Content-Type': 'application/json',
            Cookie: `connect.sid=${cookie}`,
        },
    });
    const patResponseBody = await patResponse.json();
    const apiKey = patResponseBody.results.token;
    await setContext({ serverUrl: url, apiKey });
    await setDefaultUser(userUuid);
    await setProjectInteractively();
};
